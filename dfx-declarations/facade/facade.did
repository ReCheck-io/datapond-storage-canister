service: () -> {
    getFile: (text, text, text, nat) -> (variant {Ok:record {id:text; hasNext:bool; chunk:vec nat8; name:text}; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}}) query;
    getStatus: () -> (record {status:variant {stopped; stopping; running}; memory_size:nat; cycles:nat; settings:record {freezing_threshold:nat; controllers:vec principal; reserved_cycles_limit:nat; memory_allocation:nat; compute_allocation:nat}; idle_cycles_burned_per_day:nat; module_hash:opt vec nat8; reserved_cycles:nat});
    initializeCanister: (principal) -> (variant {Ok:record {id:principal; createdAt:nat64}; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
    loadCanisterCode: (vec nat8) -> (variant {Ok:bool; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
    uploadFile: (record {id:text; content:vec nat8; name:text; size:nat}, text, bool) -> (variant {Ok:record {id:text; name:text; canisterId:text}; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
}
