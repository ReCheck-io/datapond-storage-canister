service: () -> {
    getFile: (text, text, text) -> (variant {Ok:text; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}}) query;
    initializeCanister: (principal) -> (variant {Ok:record {id:principal; createdAt:nat64}; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
    loadCanisterCode: (vec nat8) -> (variant {Ok:bool; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
    testCanisterDeploy: () -> (variant {Ok:record {status:variant {stopped; stopping; running}; memory_size:nat; cycles:nat; settings:record {freezing_threshold:nat; controllers:vec principal; memory_allocation:nat; compute_allocation:nat}; module_hash:opt vec nat8}; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
    uploadFile: (record {id:text; content:vec nat8; name:text; createdAt:nat64; size:nat}, text, bool) -> (variant {Ok:bool; Err:variant {NotKnown:text; InvalidPayload:text; NotFound:text; UploadError:text; Unauthorized:text; Conflict:text}});
}
